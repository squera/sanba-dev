// @generated automatically by Diesel CLI.

diesel::table! {
    /// Representation of the `administrator` table.
    ///
    /// (Automatically generated by Diesel.)
    administrator (person_id) {
        /// The `person_id` column of the `administrator` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        person_id -> Bigint,
    }
}

diesel::table! {
    /// Representation of the `booking` table.
    ///
    /// (Automatically generated by Diesel.)
    booking (id) {
        /// The `id` column of the `booking` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// Utente che ha inserito la prenotazione nel sistema
        author_id -> Bigint,
        /// Inizio della prenotazione, ovvero del periodo di tempo nel quale il campo viene usato
        start_datetime -> Datetime,
        /// Fine della prenotazione, ovvero del periodo di tempo nel quale il campo viene usato
        end_datetime -> Datetime,
        /// The `sport` column of the `booking` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        sport -> Varchar,
        /// The `notes` column of the `booking` table.
        ///
        /// Its SQL type is `Nullable<Text>`.
        ///
        /// (Automatically generated by Diesel.)
        notes -> Nullable<Text>,
    }
}

diesel::table! {
    /// Representation of the `camera` table.
    ///
    /// (Automatically generated by Diesel.)
    camera (id) {
        /// The `id` column of the `camera` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `ipv4_address` column of the `camera` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 15]
        ipv4_address -> Varchar,
        /// The `ipv6_address` column of the `camera` table.
        ///
        /// Its SQL type is `Nullable<Varchar>`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 39]
        ipv6_address -> Nullable<Varchar>,
        /// Porta per connettersi alla camera
        port -> Unsigned<Smallint>,
        /// Credenziali per connettersi alla camera
        #[max_length = 255]
        username -> Varchar,
        /// Credenziali per connettersi alla camera
        #[max_length = 255]
        password -> Varchar,
    }
}

diesel::table! {
    /// Memorizza quali telecamere sono state selezionate per essere utilizzate in una sessione di registrazione
    camera_session (session_id, camera_id) {
        /// The `session_id` column of the `camera_session` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        session_id -> Bigint,
        /// The `camera_id` column of the `camera_session` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        camera_id -> Bigint,
    }
}

diesel::table! {
    /// Memorizza il video dal quale proviene un altro video, dove quest'ultimo è una clip di un altro video
    clip_video (original_video_id, clip_id) {
        /// ID del video dal quale la clip è stata estratta
        original_video_id -> Bigint,
        /// ID della clip estratta
        clip_id -> Bigint,
    }
}

diesel::table! {
    /// Representation of the `coach` table.
    ///
    /// (Automatically generated by Diesel.)
    coach (person_id) {
        /// The `person_id` column of the `coach` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        person_id -> Bigint,
        /// The `role` column of the `coach` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        role -> Varchar,
    }
}

diesel::table! {
    /// Memorizza per quale team lavora o ha lavorato un coach (nel caso stia ancora lavorando per questo team, il campo until_date è null)
    coach_team (id) {
        /// The `id` column of the `coach_team` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `coach_id` column of the `coach_team` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        coach_id -> Bigint,
        /// The `team_id` column of the `coach_team` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        team_id -> Bigint,
        /// Quando il coach ha iniziato a lavorare per il team
        since_date -> Datetime,
        /// Quando il coach ha smesso di lavorare per il team (se è null, il coach sta ancora lavorando per questo team)
        until_date -> Nullable<Datetime>,
    }
}

diesel::table! {
    /// Representation of the `coach_type` table.
    ///
    /// (Automatically generated by Diesel.)
    coach_type (name) {
        /// The `name` column of the `coach_type` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        name -> Varchar,
    }
}

diesel::table! {
    /// Representation of the `fan` table.
    ///
    /// (Automatically generated by Diesel.)
    fan (person_id) {
        /// The `person_id` column of the `fan` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        person_id -> Bigint,
    }
}

diesel::table! {
    /// Rappresenta una formazione di giocatori da mettere in campo per una partita
    formation (id) {
        /// The `id` column of the `formation` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `team_id` column of the `formation` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        team_id -> Bigint,
    }
}

diesel::table! {
    /// Memorizza la presenza o meno di un giocatore in una formazione di gioco
    formation_player (id) {
        /// The `id` column of the `formation_player` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `formation_id` column of the `formation_player` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        formation_id -> Bigint,
        /// The `player_id` column of the `formation_player` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        player_id -> Bigint,
        /// Se il giocatore è un titolare in questa formazione
        starting -> Bool,
        /// Minuto della partita nel quale il giocatore è entrato in campo
        entry_minute -> Nullable<Time>,
        /// Minuto della partita nel quale il giocatore è uscito dal campo
        exit_minute -> Nullable<Time>,
    }
}

diesel::table! {
    /// Per ogni giocatore in una formazione, permette di associare molteplici sensori ad un giocatore
    formation_player_tag (formation_id, player_id, rfid_tag_id) {
        /// The `formation_id` column of the `formation_player_tag` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        formation_id -> Bigint,
        /// The `player_id` column of the `formation_player_tag` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        player_id -> Bigint,
        /// The `rfid_tag_id` column of the `formation_player_tag` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        rfid_tag_id -> Bigint,
    }
}

diesel::table! {
    /// Rappresenta una partita tra due formazioni (una di casa e una in trasferta). Nel caso in cui il team in trasferta non faccia uso del sistema (e quindi non è registrato), il campo per la formazione in trasferta è null
    game (id) {
        /// The `id` column of the `game` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// ID della formazione della squadra che gioca in casa
        home_formation_id -> Bigint,
        /// ID della formazione della squadra che gioca in trasferta (Nel caso in cui il team in trasferta non faccia uso del sistema (e quindi non è registrato), il campo è null)
        visiting_formation_id -> Nullable<Bigint>,
        /// Data e ora di inizio della partita (NB: questo valore può differire dalla data di inizio della prenotazione a cui questa partita è associata)
        start_datetime -> Datetime,
        /// Data e ora di fine della partita (NB: questo valore può differire dalla data di fine della prenotazione a cui questa partita è associata)
        end_datetime -> Nullable<Datetime>,
        /// ID della prenotazione che è stata inserita per riservare il campo per questa partita
        booking_id -> Bigint,
    }
}

diesel::table! {
    /// Riferimento a dove vengono memorizzate le informazioni ottenute dai sensori
    influxdb_bucket (location) {
        /// The `location` column of the `influxdb_bucket` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 255]
        location -> Varchar,
        /// The `team_id` column of the `influxdb_bucket` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        team_id -> Bigint,
        /// The `name` column of the `influxdb_bucket` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        name -> Varchar,
        /// The `token` column of the `influxdb_bucket` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 255]
        token -> Varchar,
        /// The `org` column of the `influxdb_bucket` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 255]
        org -> Varchar,
        /// The `db` column of the `influxdb_bucket` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 255]
        db -> Varchar,
    }
}

diesel::table! {
    /// Rappresenta una qualsiasi persona che è necessario sia presente nel sistema. NB: questa tabella è diversa da "user" perchè qui possono essere inserite persone (ad esempio giocatori) senza la necessità che creino un account per usare il sistema
    person (id) {
        /// The `id` column of the `person` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `name` column of the `person` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        name -> Varchar,
        /// The `surname` column of the `person` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        surname -> Varchar,
    }
}

diesel::table! {
    /// Representation of the `player` table.
    ///
    /// (Automatically generated by Diesel.)
    player (person_id) {
        /// The `person_id` column of the `player` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        person_id -> Bigint,
    }
}

diesel::table! {
    /// Memorizza per quale team gioca o ha giocato un giocatore (nel caso stia ancora giocando per questo team, il campo until_date è null)
    player_team (id) {
        /// The `id` column of the `player_team` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `player_id` column of the `player_team` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        player_id -> Bigint,
        /// The `team_id` column of the `player_team` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        team_id -> Bigint,
        /// Quando il giocatore ha iniziato a giocare per il team
        since_date -> Datetime,
        /// Quando il giocatore ha smesso di giocare per il team (se è null, il giocatore sta ancora giocando per questo team)
        until_date -> Nullable<Datetime>,
    }
}

diesel::table! {
    /// Una programmazione di utilizzo delle telecamere associata a una prenotazione
    recording_session (id) {
        /// The `id` column of the `recording_session` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// Utente che ha programmato/avviato la sessione di registrazione
        author_id -> Bigint,
        /// Data e ora di inizio della registrazione (NB: questo valore può differire dalla data di inizio della prenotazione a cui questa sessione è associata)
        start_datetime -> Datetime,
        /// Data e ora di fine della registrazione (NB: questo valore può differire dalla data di fine della prenotazione a cui questa sessione è associata)
        end_datetime -> Datetime,
        /// The `booking_id` column of the `recording_session` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        booking_id -> Bigint,
    }
}

diesel::table! {
    /// Representation of the `rfid_tag` table.
    ///
    /// (Automatically generated by Diesel.)
    rfid_tag (id) {
        /// The `id` column of the `rfid_tag` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
    }
}

diesel::table! {
    /// Representation of the `screenshot` table.
    ///
    /// (Automatically generated by Diesel.)
    screenshot (id) {
        /// The `id` column of the `screenshot` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `file_location` column of the `screenshot` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 255]
        file_location -> Varchar,
        /// ID del video dal quale è stato estratto questo screenshot
        video_id -> Bigint,
        /// Istante del video nel quale è stato estratto questo screenshot
        instant -> Time,
        /// The `name` column of the `screenshot` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        name -> Varchar,
        /// The `notes` column of the `screenshot` table.
        ///
        /// Its SQL type is `Nullable<Text>`.
        ///
        /// (Automatically generated by Diesel.)
        notes -> Nullable<Text>,
    }
}

diesel::table! {
    /// Representation of the `sport` table.
    ///
    /// (Automatically generated by Diesel.)
    sport (name) {
        /// The `name` column of the `sport` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        name -> Varchar,
    }
}

diesel::table! {
    /// Representation of the `sports_club` table.
    ///
    /// (Automatically generated by Diesel.)
    sports_club (vat_number) {
        /// Partita IVA della società sportiva
        #[max_length = 11]
        vat_number -> Varchar,
        /// The `name` column of the `sports_club` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        name -> Varchar,
        /// The `address` column of the `sports_club` table.
        ///
        /// Its SQL type is `Nullable<Varchar>`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        address -> Nullable<Varchar>,
        /// The `city` column of the `sports_club` table.
        ///
        /// Its SQL type is `Nullable<Varchar>`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        city -> Nullable<Varchar>,
        /// The `phone` column of the `sports_club` table.
        ///
        /// Its SQL type is `Nullable<Varchar>`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        phone -> Nullable<Varchar>,
    }
}

diesel::table! {
    /// Representation of the `team` table.
    ///
    /// (Automatically generated by Diesel.)
    team (id) {
        /// The `id` column of the `team` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `name` column of the `team` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        name -> Varchar,
        /// ID della società sportiva alla quale fa parte questa squadra
        #[max_length = 11]
        club_id -> Varchar,
        /// Sport praticato da questa squadra
        #[max_length = 64]
        sport -> Varchar,
    }
}

diesel::table! {
    /// Representation of the `time_marker` table.
    ///
    /// (Automatically generated by Diesel.)
    time_marker (id) {
        /// The `id` column of the `time_marker` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `instant` column of the `time_marker` table.
        ///
        /// Its SQL type is `Time`.
        ///
        /// (Automatically generated by Diesel.)
        instant -> Time,
        /// ID del video nel quale è stato inserito questo marker
        video_id -> Bigint,
        /// The `name` column of the `time_marker` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        name -> Varchar,
        /// The `notes` column of the `time_marker` table.
        ///
        /// Its SQL type is `Nullable<Text>`.
        ///
        /// (Automatically generated by Diesel.)
        notes -> Nullable<Text>,
    }
}

diesel::table! {
    /// Rappresenta un allenamento di una singola squadra
    training (id) {
        /// The `id` column of the `training` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `team_id` column of the `training` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        team_id -> Bigint,
        /// Data e ora di inizio dell'allenamento (NB: questo valore può differire dalla data di inizio della prenotazione a cui questo allenamento è associato)
        start_datetime -> Datetime,
        /// Data e ora di fine dell'allenamento (NB: questo valore può differire dalla data di fine della prenotazione a cui questo allenamento è associato)
        end_datetime -> Nullable<Datetime>,
        /// ID della prenotazione che è stata inserita per riservare il campo per questo allenamento
        booking_id -> Bigint,
    }
}

diesel::table! {
    /// Memorizza la presenza o meno di un giocatore in un dato allenamento
    training_player (id) {
        /// The `id` column of the `training_player` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `training_id` column of the `training_player` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        training_id -> Bigint,
        /// The `player_id` column of the `training_player` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        player_id -> Bigint,
    }
}

diesel::table! {
    /// Per ogni giocatore in un allenamento, permette di associare molteplici sensori ad un giocatore
    training_player_tag (training_id, player_id, rfid_tag_id) {
        /// The `training_id` column of the `training_player_tag` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        training_id -> Bigint,
        /// The `player_id` column of the `training_player_tag` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        player_id -> Bigint,
        /// The `rfid_tag_id` column of the `training_player_tag` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        rfid_tag_id -> Bigint,
    }
}

diesel::table! {
    /// Rappresenta un utilizzatore del sistema (con le informazioni per l'accesso). Un utente deve essere  associato ad una persona. La differenza tra le due tabelle è che persona permette di inserire nel sistema un nome e cognome (ad esempio giocatori) senza la necessità di creare un account per usare il sistema
    user (person_id) {
        /// ID della persona alla quale questo utente è associato
        person_id -> Bigint,
        /// The `email` column of the `user` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 320]
        email -> Varchar,
        /// The `password` column of the `user` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 255]
        password -> Varchar,
        /// The `birth_date` column of the `user` table.
        ///
        /// Its SQL type is `Nullable<Date>`.
        ///
        /// (Automatically generated by Diesel.)
        birth_date -> Nullable<Date>,
        /// The `address` column of the `user` table.
        ///
        /// Its SQL type is `Nullable<Varchar>`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        address -> Nullable<Varchar>,
        /// The `city` column of the `user` table.
        ///
        /// Its SQL type is `Nullable<Varchar>`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        city -> Nullable<Varchar>,
        /// The `phone` column of the `user` table.
        ///
        /// Its SQL type is `Nullable<Varchar>`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        phone -> Nullable<Varchar>,
        /// Posizione dell'immagine del profilo di questo utente
        #[max_length = 255]
        profile_image_location -> Varchar,
        /// Se questo utente è stato verificato tramite email
        verified -> Bool,
        /// Data di registrazione dell'utente nel sistema
        signup_datetime -> Datetime,
    }
}

diesel::table! {
    /// Rappresenta il collegamento tra una società sportiva e l'utente che la rappresenta/gestisce nel sistema
    user_club (user_id, club_id, since_date) {
        /// The `user_id` column of the `user_club` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        user_id -> Bigint,
        /// The `club_id` column of the `user_club` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 11]
        club_id -> Varchar,
        /// The `since_date` column of the `user_club` table.
        ///
        /// Its SQL type is `Datetime`.
        ///
        /// (Automatically generated by Diesel.)
        since_date -> Datetime,
        /// The `until_date` column of the `user_club` table.
        ///
        /// Its SQL type is `Nullable<Datetime>`.
        ///
        /// (Automatically generated by Diesel.)
        until_date -> Nullable<Datetime>,
    }
}

diesel::table! {
    /// Rappresenta un invito per una certa persona ad usare il sistema. L''utente' che inserisce la 'persona' nel sistema (ad esempio un allenatore che inserisce i suoi giocatori) può decidere di inserire un 'invito' che tale persona potrà usare per creare un 'utente' direttamente collegato alla 'persona' già inserita nel database. Se viene inserita anche l'email nell'invito, il sistema può controllare che l'email inserita in fase di registrazione corrisponda a quella dell'invito
    user_invitation (access_code, person_id) {
        /// Codice univoco da fornire al sistema per usare questo invito in fase di registrazione (il codice può essere comunicato alla persona tramite email automatica oppure autonomamente da chi ha inserito l'invito)
        #[max_length = 10]
        access_code -> Char,
        /// ID della persona alla quale verrà associato il nuovo utente che si registrerà con questo invito
        person_id -> Bigint,
        /// Se viene inserita anche l'email nell'invito, il sistema può controllare che l'email inserita in fase di registrazione corrisponda a quella dell'invito
        #[max_length = 320]
        email -> Nullable<Varchar>,
    }
}

diesel::table! {
    /// Representation of the `video` table.
    ///
    /// (Automatically generated by Diesel.)
    video (id) {
        /// The `id` column of the `video` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        id -> Bigint,
        /// The `file_location` column of the `video` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 255]
        file_location -> Varchar,
        /// The `name` column of the `video` table.
        ///
        /// Its SQL type is `Varchar`.
        ///
        /// (Automatically generated by Diesel.)
        #[max_length = 64]
        name -> Varchar,
        /// The `date` column of the `video` table.
        ///
        /// Its SQL type is `Datetime`.
        ///
        /// (Automatically generated by Diesel.)
        date -> Datetime,
        /// The `notes` column of the `video` table.
        ///
        /// Its SQL type is `Nullable<Text>`.
        ///
        /// (Automatically generated by Diesel.)
        notes -> Nullable<Text>,
        /// ID della sessione di registrazione che ha portato alla creazione di questo video
        session_id -> Bigint,
        /// ID della camera che ha registrato questo video
        camera_id -> Bigint,
    }
}

diesel::table! {
    /// Rappresenta la relazione tra un certo utente e un video, dove i vari parametri booleani specificano le azioni possibili per l'utente su questo video
    video_user (user_id, video_id) {
        /// The `user_id` column of the `video_user` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        user_id -> Bigint,
        /// The `video_id` column of the `video_user` table.
        ///
        /// Its SQL type is `Bigint`.
        ///
        /// (Automatically generated by Diesel.)
        video_id -> Bigint,
        /// The `is_owner` column of the `video_user` table.
        ///
        /// Its SQL type is `Bool`.
        ///
        /// (Automatically generated by Diesel.)
        is_owner -> Bool,
        /// The `read` column of the `video_user` table.
        ///
        /// Its SQL type is `Bool`.
        ///
        /// (Automatically generated by Diesel.)
        read -> Bool,
        /// The `edit` column of the `video_user` table.
        ///
        /// Its SQL type is `Bool`.
        ///
        /// (Automatically generated by Diesel.)
        edit -> Bool,
        /// The `delete` column of the `video_user` table.
        ///
        /// Its SQL type is `Bool`.
        ///
        /// (Automatically generated by Diesel.)
        delete -> Bool,
        /// The `share` column of the `video_user` table.
        ///
        /// Its SQL type is `Bool`.
        ///
        /// (Automatically generated by Diesel.)
        share -> Bool,
    }
}

diesel::joinable!(administrator -> person (person_id));
diesel::joinable!(booking -> sport (sport));
diesel::joinable!(booking -> user (author_id));
diesel::joinable!(camera_session -> camera (camera_id));
diesel::joinable!(camera_session -> recording_session (session_id));
diesel::joinable!(coach -> coach_type (role));
diesel::joinable!(coach -> person (person_id));
diesel::joinable!(coach_team -> coach (coach_id));
diesel::joinable!(coach_team -> team (team_id));
diesel::joinable!(fan -> person (person_id));
diesel::joinable!(formation -> team (team_id));
diesel::joinable!(formation_player -> formation (formation_id));
diesel::joinable!(formation_player -> player (player_id));
diesel::joinable!(formation_player_tag -> formation (formation_id));
diesel::joinable!(formation_player_tag -> player (player_id));
diesel::joinable!(formation_player_tag -> rfid_tag (rfid_tag_id));
diesel::joinable!(game -> booking (booking_id));
diesel::joinable!(influxdb_bucket -> team (team_id));
diesel::joinable!(player -> person (person_id));
diesel::joinable!(player_team -> player (player_id));
diesel::joinable!(player_team -> team (team_id));
diesel::joinable!(recording_session -> booking (booking_id));
diesel::joinable!(recording_session -> user (author_id));
diesel::joinable!(screenshot -> video (video_id));
diesel::joinable!(team -> sport (sport));
diesel::joinable!(team -> sports_club (club_id));
diesel::joinable!(time_marker -> video (video_id));
diesel::joinable!(training -> booking (booking_id));
diesel::joinable!(training -> team (team_id));
diesel::joinable!(training_player -> player (player_id));
diesel::joinable!(training_player -> training (training_id));
diesel::joinable!(training_player_tag -> player (player_id));
diesel::joinable!(training_player_tag -> rfid_tag (rfid_tag_id));
diesel::joinable!(training_player_tag -> training (training_id));
diesel::joinable!(user -> person (person_id));
diesel::joinable!(user_club -> sports_club (club_id));
diesel::joinable!(user_club -> user (user_id));
diesel::joinable!(user_invitation -> person (person_id));
diesel::joinable!(video -> camera (camera_id));
diesel::joinable!(video -> recording_session (session_id));
diesel::joinable!(video_user -> user (user_id));
diesel::joinable!(video_user -> video (video_id));

diesel::allow_tables_to_appear_in_same_query!(
    administrator,
    booking,
    camera,
    camera_session,
    clip_video,
    coach,
    coach_team,
    coach_type,
    fan,
    formation,
    formation_player,
    formation_player_tag,
    game,
    influxdb_bucket,
    person,
    player,
    player_team,
    recording_session,
    rfid_tag,
    screenshot,
    sport,
    sports_club,
    team,
    time_marker,
    training,
    training_player,
    training_player_tag,
    user,
    user_club,
    user_invitation,
    video,
    video_user,
);
